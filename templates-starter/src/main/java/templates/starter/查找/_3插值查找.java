package templates.starter.查找;

public class _3插值查找 {
    /**
     * 基本思想：基于二分查找算法，将查找点的选择改进为自适应选择，可以提高查找效率。当然，差值查找也属于有序查找。
     * 注：对于表长较大，而关键字分布又比较均匀的查找表来说，插值查找算法的平均性能比折半查找要好的多。反之，数组中如果分布非常不均匀，那么插值查找未必是很合适的选择。
     * 复杂度分析：查找成功或者失败的时间复杂度均为O(logn)。
     *
     * 参看大话数据结构：与2分查找的不同在于mid的计算公式
     * mid= ((target-lowValue)/(highValue-lowValue))*(high-low) + low，而二分查找的公式为mid = 1/2*(high-low)+low
     */
}
